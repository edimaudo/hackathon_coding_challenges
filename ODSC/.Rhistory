ggplot(data = train,aes(x = u_d,y = pm)) +
geom_point() + theme_classic() +
labs(x = "u_d",y = "pm") +
scale_y_continuous(labels = comma) +
theme(
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
axis.title = element_text(size = 15),
axis.text = element_text(size = 10))
#u_q and pm
ggplot(data = train,aes(x = u_q,y = pm)) +
geom_point() + theme_classic() +
labs(x = "u_q",y = "pm") +
scale_y_continuous(labels = comma) +
theme(
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
axis.title = element_text(size = 15),
axis.text = element_text(size = 10))
corinfo <- NULL
d <- NULL
dm <- NULL
test <- NULL
test_solutions <- NULL
# i_q and pm
ggplot(data = train,aes(x = i_q,y = pm)) +
geom_point() + theme_classic() +
labs(x = "i_q",y = "pm") +
scale_y_continuous(labels = comma) +
theme(
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
axis.title = element_text(size = 15),
axis.text = element_text(size = 10))
rm(list=ls()) #clear environment
packages <- c('ggplot2','corrplot','tidyr',
'tidyverse','dplyr','scales','catboost',
'xgboost','caret','dummies','mlbench','Matrix','data.table')
#load packages
for (package in packages) {
if (!require(package, character.only = T, quietly = T)) {
install.packages(package)
library(package, character.only = T)
}
}
# --------------------------------------------------------
# load data
# --------------------------------------------------------
# set working directory to file location
train <- read_csv("train.csv")
test <- read_csv("test.csv")
test_solutions <- read_csv("test_solutions.csv")
test <- cbind(test, test_solutions)
#normalized data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
#train information normalizing
df_train<- train[,c(1:8)]
df_train <- as.data.frame(lapply(df_train, normalize))
#test information normalized
df_test<- test[,c(1:8)]
df_test <- as.data.frame(lapply(df_test, normalize))
params <- list(iterations=500,
learning_rate=0.01,
depth=10,
loss_function='RMSE',
eval_metric='RMSE',
random_seed = 55,
od_type='Iter',
metric_period = 50,
od_wait=20,
use_best_model=TRUE)
#build pm model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_pm)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_pm)
model_pm <- catboost.train(train_pool,test_pool ,params = params)
y_pred_pm=catboost.predict(model_pm,test_pool)
cat("\n Metircs ", "\n")
postResample(y_pred_pm,test$pm)
#RMSE  Rsquared       MAE
#0.9103235 0.1514294 0.7445611
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_pm, train_pool)
Target_train_pm <- train$pm
Target_train_stator_tooth <- train$stator_tooth
Target_train_stator_yoke <- train$stator_yoke
Target_train_stator_winding <- train$stator_winding
Target_test_pm <- test$pm
Target_test_stator_tooth <- test$stator_tooth
Target_test_stator_yoke <- test$stator_yoke
Target_test_stator_winding <- test$stator_winding
#normalized data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
#train information normalizing
df_train<- train[,c(1:8)]
df_train <- as.data.frame(lapply(df_train, normalize))
#test information normalized
df_test<- test[,c(1:8)]
df_test <- as.data.frame(lapply(df_test, normalize))
# --------------------------------------------------------
# initial models
# --------------------------------------------------------
#initial parameters
params <- list(iterations=500,
learning_rate=0.01,
depth=10,
loss_function='RMSE',
eval_metric='RMSE',
random_seed = 55,
od_type='Iter',
metric_period = 50,
od_wait=20,
use_best_model=TRUE)
#build pm model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_pm)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_pm)
model_pm <- catboost.train(train_pool,test_pool ,params = params)
y_pred_pm=catboost.predict(model_pm,test_pool)
cat("\n Metircs ", "\n")
postResample(y_pred_pm,test$pm)
#RMSE  Rsquared       MAE
#0.9103235 0.1514294 0.7445611
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_pm, train_pool)
#build stator tooth model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_stator_tooth)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_stator_tooth)
model_stator_tooth <- catboost.train(train_pool,test_pool ,params = params)
y_pred_model_stator_tooth=catboost.predict(model_stator_tooth,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_model_stator_tooth,test$stator_tooth)
#RMSE  Rsquared       MAE
#0.5536960 0.5877786 0.4480499
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_stator_tooth, train_pool)
#build stator yoke model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_stator_yoke)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_stator_yoke)
model_stator_yoke <- catboost.train(train_pool,test_pool ,params = params)
y_pred_stator_yoke=catboost.predict(model_stator_yoke,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_stator_yoke,test$stator_yoke)
#RMSE  Rsquared       MAE
#0.3921159 0.7623605 0.3150374
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_stator_yoke, train_pool)
#build startor winding model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_stator_winding)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_stator_winding)
model_stator_winding <- catboost.train(train_pool,test_pool ,params = params)
y_pred_stator_winding=catboost.predict(model_stator_winding,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_stator_winding,test$stator_winding)
#RMSE  Rsquared       MAE
#0.6032356 0.6117927 0.4836608
#feature importance
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_stator_winding, train_pool)
model_pm$handle
model_pm$raw
model_pm$tree_count
model_pm$feature_importances
correlationMatrix <- cor(df_train[,1:length(df_train)-4])
# # summarize the correlation matrix
# print(correlationMatrix)
# # find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.8)
# # print indexes of highly correlated attributes
print(highlyCorrelated)
correlationMatrix <- cor(df_train[,1:length(df_train)])
View(df_train)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.8)
print(highlyCorrelated)
View(correlationMatrix)
df_train<- train[,c(1:5,7:8)]
#train information normalizing
df_train<- train[,c(1:5,7:8)]
df_train <- as.data.frame(lapply(df_train, normalize))
#test information normalized
df_test<- test[,c(1:5,7:8)]
df_test <- as.data.frame(lapply(df_test, normalize))
params <- list(iterations=500,
learning_rate=0.01,
depth=10,
loss_function='RMSE',
eval_metric='RMSE',
random_seed = 55,
od_type='Iter',
metric_period = 50,
od_wait=20,
use_best_model=TRUE)
#build pm model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_pm)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_pm)
model_pm <- catboost.train(train_pool,test_pool ,params = params)
y_pred_pm=catboost.predict(model_pm,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_pm,test$pm)
#RMSE  Rsquared       MAE
#0.9103235 0.1514294 0.7445611
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_pm, train_pool)
# ambient     27.6343322
# coolant     27.7570219
# u_d          9.3242962
# u_q         12.0743270
# motor_speed 12.5978186
# torque       4.5722120
# i_d          0.4863714
# i_q          5.5536206
#train information normalizing
df_train<- train[,c(1:8)]
df_train <- as.data.frame(lapply(df_train, normalize))
#test information normalized
df_test<- test[,c(1:8)]
df_test <- as.data.frame(lapply(df_test, normalize))
#initial parameters
params <- list(iterations=500,
learning_rate=0.01,
depth=14,
loss_function='RMSE',
eval_metric='RMSE',
random_seed = 55,
od_type='Iter',
metric_period = 50,
od_wait=20,
use_best_model=TRUE)
#build pm model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_pm)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_pm)
model_pm <- catboost.train(train_pool,test_pool ,params = params)
y_pred_pm=catboost.predict(model_pm,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_pm,test$pm)
params <- list(iterations=500,
learning_rate=0.01,
depth=14,
loss_function='RMSE',
eval_metric='RMSE',
random_seed = 54,
od_type='Iter',
metric_period = 50,
od_wait=20,
use_best_model=TRUE)
#build pm model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_pm)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_pm)
model_pm <- catboost.train(train_pool,test_pool ,params = params)
y_pred_pm=catboost.predict(model_pm,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_pm,test$pm)
#train information normalizing
df_train<- train[,c(1:5)]
df_train <- as.data.frame(lapply(df_train, normalize))
#test information normalized
df_test<- test[,c(1:5)]
df_test <- as.data.frame(lapply(df_test, normalize))
# --------------------------------------------------------
# initial models
# --------------------------------------------------------
#initial parameters
params <- list(iterations=500,
learning_rate=0.01,
depth=10,
loss_function='RMSE',
eval_metric='RMSE',
random_seed = 55,
od_type='Iter',
metric_period = 50,
od_wait=20,
use_best_model=TRUE)
#build pm model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_pm)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_pm)
model_pm <- catboost.train(train_pool,test_pool ,params = params)
y_pred_pm=catboost.predict(model_pm,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_pm,test$pm)
#RMSE  Rsquared       MAE
#0.9103235 0.1514294 0.7445611
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_pm, train_pool)
ggplot(train, aes(x=ambient))+
geom_histogram(color="darkblue", fill="lightblue")
ggplot(df, aes(x=coolant))+
geom_histogram(color="darkblue", fill="blue")
ggplot(train, aes(x=coolant))+
geom_histogram(color="darkblue", fill="lightblue")
ggplot(train, aes(x=u_d))+
geom_histogram(color="darkblue", fill="lightblue")
# u_q
ggplot(train, aes(x=coolant))+
geom_histogram(color="darkblue", fill="lightblue")
#centered around -1
# u_q
ggplot(train, aes(x=u_q))+
geom_histogram(color="darkblue", fill="lightblue")
ggplot(train, aes(x=motor_speed))+
geom_histogram(color="darkblue", fill="lightblue")
ggplot(train, aes(x=torque))+
geom_histogram(color="darkblue", fill="lightblue")
# i_d
ggplot(train, aes(x=i_d))+
geom_histogram(color="darkblue", fill="lightblue")
#centered around -1
ggplot(train, aes(x=i_qt))+
geom_histogram(color="darkblue", fill="lightblue")
#centered around -1
ggplot(train, aes(x=i_q))+
geom_histogram(color="darkblue", fill="lightblue")
#centered around -1
ggplot(train, aes(x=pm))+
geom_histogram(color="darkblue", fill="lightblue") + theme_classic()
ggplot(train, aes(x=stator_tooth))+
geom_histogram(color="darkblue", fill="lightblue") + theme_classic()
ggplot(train, aes(x=stator_yoke))+
geom_histogram(color="darkblue", fill="lightblue") + theme_classic()
ggplot(train, aes(x=stator_winding))+
geom_histogram(color="darkblue", fill="lightblue") + theme_classic()
test <- as.data.frame(lapply(test, normalize))
train <- as.data.frame(lapply(train, normalize))
Target_train_pm <- train$pm
Target_train_stator_tooth <- train$stator_tooth
Target_train_stator_yoke <- train$stator_yoke
Target_train_stator_winding <- train$stator_winding
Target_test_pm <- test$pm
Target_test_stator_tooth <- test$stator_tooth
Target_test_stator_yoke <- test$stator_yoke
Target_test_stator_winding <- test$stator_winding
params <- list(iterations=500,
learning_rate=0.01,
depth=10,
loss_function='RMSE',
eval_metric='RMSE',
random_seed = 55,
od_type='Iter',
metric_period = 50,
od_wait=20,
use_best_model=TRUE)
#build pm model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_pm)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_pm)
model_pm <- catboost.train(train_pool,test_pool ,params = params)
y_pred_pm=catboost.predict(model_pm,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_pm,test$pm)
#RMSE  Rsquared       MAE
#0.9103235 0.1514294 0.7445611
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_pm, train_pool)
# ambient     27.6343322
# coolant     27.7570219
# u_d          9.3242962
# u_q         12.0743270
# motor_speed 12.5978186
# torque       4.5722120
# i_d          0.4863714
# i_q          5.5536206
#train information normalizing
train <- as.data.frame(lapply(train, normalize))
df_train<- train[,c(1:8)]
#test information normalized
test <- as.data.frame(lapply(test, normalize))
df_test<- test[,c(1:8)]
Target_train_pm <- train$pm
Target_train_stator_tooth <- train$stator_tooth
Target_train_stator_yoke <- train$stator_yoke
Target_train_stator_winding <- train$stator_winding
Target_test_pm <- test$pm
Target_test_stator_tooth <- test$stator_tooth
Target_test_stator_yoke <- test$stator_yoke
Target_test_stator_winding <- test$stator_winding
# --------------------------------------------------------
# initial models
# --------------------------------------------------------
#initial parameters
params <- list(iterations=500,
learning_rate=0.01,
depth=10,
loss_function='RMSE',
eval_metric='RMSE',
random_seed = 55,
od_type='Iter',
metric_period = 50,
od_wait=20,
use_best_model=TRUE)
#build pm model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_pm)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_pm)
model_pm <- catboost.train(train_pool,test_pool ,params = params)
y_pred_pm=catboost.predict(model_pm,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_pm,test$pm)
#RMSE  Rsquared       MAE
#0.9103235 0.1514294 0.7445611
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_pm, train_pool)
#build stator tooth model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_stator_tooth)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_stator_tooth)
model_stator_tooth <- catboost.train(train_pool,test_pool ,params = params)
y_pred_model_stator_tooth=catboost.predict(model_stator_tooth,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_model_stator_tooth,test$stator_tooth)
#RMSE  Rsquared       MAE
#0.5536960 0.5877786 0.4480499
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_stator_tooth, train_pool)
# build stator yoke model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_stator_yoke)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_stator_yoke)
model_stator_yoke <- catboost.train(train_pool,test_pool ,params = params)
y_pred_stator_yoke=catboost.predict(model_stator_yoke,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_stator_yoke,test$stator_yoke)
#RMSE  Rsquared       MAE
#0.3921159 0.7623605 0.3150374
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_stator_yoke, train_pool)
train_pool <- catboost.load_pool(data = df_train, label = Target_train_stator_winding)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_stator_winding)
model_stator_winding <- catboost.train(train_pool,test_pool ,params = params)
y_pred_stator_winding=catboost.predict(model_stator_winding,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_stator_winding,test$stator_winding)
#RMSE  Rsquared       MAE
#0.6032356 0.6117927 0.4836608
#feature importance
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_stator_winding, train_pool)
# ambient     11.437392
# coolant     32.496352
# u_d          8.221389
# u_q         16.881759
# motor_speed  1.520885
# torque       2.970581
# i_d         23.792802
# i_q          2.678840
df_train_pm<- train[,c(1:5)]
df_test_pm <- test[,c(1:5)]
# stator tooth data
df_train_stator_tooth<- train[,c(1,2,4,7)]
df_test_stator_tooth <- test[,c(1,2,4,7)]
# stator yoke data
df_train_stator_yoke<- train[,c(1,2,7)]
df_test_stator_yoke <- test[,c(1,2,7)]
# stator winding data
df_train_stator_winding <- train[,c(1,2,4,7)]
df_test_stator_winding <- test[,c(1,2,4,7)]
df_train_pm<- train[,c(1:5)]
df_test_pm <- test[,c(1:5)]
train_pool <- catboost.load_pool(data = df_train_pm, label = Target_train_pm)
test_pool <- catboost.load_pool(data = df_test_pm, label = Target_test_pm)
model_pm <- catboost.train(train_pool,test_pool ,params = params)
y_pred_pm=catboost.predict(model_pm,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_pm,test$pm)
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_pm, train_pool)
# stator tooth data
df_train_stator_tooth<- train[,c(1,2,4,7)]
df_test_stator_tooth <- test[,c(1,2,4,7)]
# build stator tooth model
train_pool <- catboost.load_pool(data = df_train, label = Target_train_stator_tooth)
test_pool <- catboost.load_pool(data = df_test, label = Target_test_stator_tooth)
model_stator_tooth <- catboost.train(train_pool,test_pool ,params = params)
y_pred_model_stator_tooth=catboost.predict(model_stator_tooth,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_model_stator_tooth,test$stator_tooth)
# RMSE  Rsquared       MAE
# 0.1564777 0.5747189 0.1273713
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_stator_tooth, train_pool)
# build stator tooth model
train_pool <- catboost.load_pool(data = df_train_stator_tooth, label = Target_train_stator_tooth)
test_pool <- catboost.load_pool(data = df_test_stator_tooth, label = Target_test_stator_tooth)
model_stator_tooth <- catboost.train(train_pool,test_pool ,params = params)
y_pred_model_stator_tooth=catboost.predict(model_stator_tooth,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_model_stator_tooth,test$stator_tooth)
# RMSE  Rsquared       MAE
# 0.1564777 0.5747189 0.1273713
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_stator_tooth, train_pool)
train_pool <- catboost.load_pool(data = df_train_stator_yoke, label = Target_train_stator_yoke)
test_pool <- catboost.load_pool(data = df_test_stator_yoke, label = Target_test_stator_yoke)
model_stator_yoke <- catboost.train(train_pool,test_pool ,params = params)
y_pred_stator_yoke=catboost.predict(model_stator_yoke,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_stator_yoke,test$stator_yoke)
# RMSE   Rsquared        MAE
# 0.11103872 0.75938597 0.09005218
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_stator_yoke, train_pool)
# stator winding data
df_train_stator_winding <- train[,c(1,2,4,7)]
df_test_stator_winding <- test[,c(1,2,4,7)]
# build startor winding model
train_pool <- catboost.load_pool(data = df_train_stator_winding, label = Target_train_stator_winding)
test_pool <- catboost.load_pool(data = df_test_stator_winding, label = Target_test_stator_winding)
model_stator_winding <- catboost.train(train_pool,test_pool ,params = params)
y_pred_stator_winding=catboost.predict(model_stator_winding,test_pool)
cat("\n Metrics ", "\n")
postResample(y_pred_stator_winding,test$stator_winding)
# RMSE  Rsquared       MAE
# 0.1597373 0.5974142 0.1291624
#feature importance
cat("\nFeature importances", "\n")
catboost.get_feature_importance(model_stator_winding, train_pool)
